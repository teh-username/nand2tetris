[1]

<SEG> - LCL, ARG, THIS, THAT

pop <SEG> 2

addr = <SEG> + 2;
SP--;
*addr = *SP;

@2
D=A
@LCL
D=D+M

@R13
M=D

@SP
AM=M-1
D=M

@R13
A=M
M=D

-------------------------

push <SEG> 2

addr = <SEG> + 2;
*SP = *addr;
SP++;

@2
D=A

@LCL
A=D+M
D=M

@SP
A=M
M=D

@SP
M=M+1

[2]

push constant 4

*SP = 4;
SP++;

@4
D=A

@SP
A=M
M=D

@SP
M=M+1

[3]

Ex: Foo.vm

push static 4

*SP = Foo.4;
SP++;

@Foo.4
D=M

@SP
A=M
M=D

@SP
M=M+1

pop static 4

SP--;
Foo.4 = *SP;

@SP
AM=M-1
D=M

@Foo.4
M=D

[4]

i = 0-7
offset = 5

push temp 6


@5
D=A
@6
A=D+A
D=M

@SP
A=M
M=D

@SP
M=M+1

pop temp 6

@5
D=A
@6
D=D+A
@R13
M=D

@SP
AM=M-1
D=M

@R13
A=M
M=D

[5]
0 = THIS
1 = THAT

push pointer 0/1

@THIS/THAT
D=M

@SP
A=M
M=D

@SP
M=M+1

pop pointer 0/1

@THIS/THAT
D=A
@R13
M=D

@SP
AM=M-1
D=M

@R13
A=M
M=D

=================================
Arithmetic
Use R14 to temp loc

stack
x
y

add/sub

stack
x+y, x-y

R14 = *(SP--) y
D = *(SP--) x
*SP = x + y

@SP // SP = 30
AM=M-1 // SP = 29
D=M // D = RAM[29]
A=A-1 // A = 28
M=M+D // RAM[28] = RAM[28] + RAM[29]

eq

x == y -> -1
x != y -> 0

@SP // 30
AM=M-1 // SP=29, A=29
D=M    // RAM[29]
A=A-1 // A=28
D=M-D // D = RAM[28] - RAM[29]
@logi_eq_1
D;JEQ
D=-1
(logi_eq_1)
@SP
A=M-1 //A=29-28
M=!D  //RAM[28] = !D

lt

AND with the sign bit, if 0 pos/0, else neg

x < y -> -1, 0

x-y = z, if z is neg, -1, else 0


@SP
AM=M-1
D=M
A=A-1
D=M-D    //x-y
@32767
A=A+1
D=D&A    // AND with 1xxx, if not zero, lt
@logi_lt_1
D;JEQ
D=-1
(logi_lt_1) // if you jumped here, x < y is false
@SP
A=M-1
M=D

@SP
AM=M-1
D=M
A=A-1
MD=M-D
@logi_lt_true_1
D;JLT
D=0
@logi_lt_1_end
0;JMP
(logi_lt_true_1)
D=-1
(logi_lt_1_end)
@SP
A=M-1
M=D

gt

same logic with lt but switch the order of x-y (y-x)

AND with the sign bit, if 0 pos/0, else neg

x > y -> -1, 0

y-x = z, if z is neg, -1, else 0

@SP
AM=M-1
D=M
A=A-1
D=D-M    // y-x
@32767
A=A+1
D=D&A    // AND with 1xxx, if not zero, lt
@logi_gt_1
D;JEQ
D=-1
(logi_gt_1) // if you jumped here, x > y is false
@SP
A=M-1
M=D

neg

-y

@SP    // SP=30
A=M-1  // A=29
M=-M   // RAM[29] = -RAM[29]


AND / OR

@SP // SP = 30
AM=M-1 // SP = 29
D=M // D = RAM[29]
A=A-1 // A = 28
M=M&D // RAM[28] = RAM[28] & RAM[29]

not

!y

@SP    // SP=30
A=M-1  // A=29
M=!M   // RAM[29] = -RAM[29]
