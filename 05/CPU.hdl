// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // D Register
    And (a=instruction[4], b=instruction[15], out=loadDReg);
    DRegister (in=aluOut, load=loadDReg, out=dRegOut);

    // A Mux
    Mux16 (a=instruction, b=aluOut, sel=instruction[15], out=AMuxOut);

    // Aload
    And (a=instruction[5], b=instruction[15], out=d1OrOp);
    Not (in=instruction[15], out=notOp);
    Or  (a=d1OrOp, b=notOp, out=loadAReg);

    // A Register
    ARegister (in=AMuxOut, load=loadAReg, out=aRegOut, out[0..14]=addressM);

    // Y Mux
    Mux16 (a=aRegOut, b=inM, sel=instruction[12], out=YMuxOut);

    // ALU
    ALU (
        x=dRegOut,
        y=YMuxOut,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=aluOut,
        out=outM,
        zr=zrOut,
        ng=ngOut
    );

    // PC
    Not (in=zrOut, out=notZr); // f
    Not (in=ngOut, out=notNg); // d
    And (a=notZr, b=notNg, out=notZrAndnotNg); // b
    And (a=zrOut, b=notNg, out=zrAndNotNg); // c
    And (a=notZr, b=ngOut, out=notZrAndNg); // e
    Or  (a=zrOut, b=ngOut, out=zrOrNg); // g
    //And (a=zrOut, b=ngOut, out=zrAndNg); // g

    Mux (a=false, b=notZrAndnotNg, sel=instruction[0], out=m1Out); // A, B
    Mux (a=zrAndNotNg, b=notNg, sel=instruction[0], out=m2Out); // C, D
    Mux (a=notZrAndNg, b=notZr, sel=instruction[0], out=m3Out); // E, F
    Mux (a=zrOrNg, b=true, sel=instruction[0], out=m4Out); // G, H

    Mux (a=m1Out, b=m2Out, sel=instruction[1], out=m5Out);
    Mux (a=m3Out, b=m4Out, sel=instruction[1], out=m6Out);

    Mux (a=m5Out, b=m6Out, sel=instruction[2], out=jmpLoad);

    Mux (a=false, b=jmpLoad, sel=instruction[15], out=pcLoadOut);

    PC (in=aRegOut, load=pcLoadOut, inc=true, reset=reset, out[0..14]=pc);

    // writeM
    And (a=instruction[3], b=instruction[15], out=writeM);
}
